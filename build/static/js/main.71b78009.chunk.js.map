{"version":3,"sources":["components/Item.js","components/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","className","href","url","target","rel","title","length","substring","source","style","height","viewBox","version","width","aria-hidden","fillRule","d","fill","src","author_avatar","alt","author","description","language","stars","forks","issues","ItemList","fetch_projects","search","toLowerCase","fetch","state","links","then","response","a","json","resData","items","source_object","map","elt","index","split","push","parseInt","avatar","indexOf","sort","b","reverse","setState","load","count","catch","error","errorMessage","toString","console","componentWillReceiveProps","nextProps","go_search","log","this","key","Component","App","search_query","query","event","value","type","onKeyDown","handle_change","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.71b78009.chunk.js","sourcesContent":["import React from 'react'\nimport './Item.css';\n\nconst Item = (props) => {\n  return (\n    <div className=\"Item-Single\">\n      <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        <b className=\"Item-Title\">\n          {(props.title.length > 25) ? props.title.substring(0, 25) + \"...\" : props.title }\n        </b>\n        \n        {(props.source === \"github\")? \n          <svg style={{\"float\": \"right\"}} height=\"24\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\" aria-hidden=\"true\">\n            <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path>\n          </svg>\n        : null}\n\n        {(props.source === \"gitlab\")? \n          <svg style={{\"float\": \"right\"}}  width=\"24\" height=\"24\" viewBox=\"0 0 36 36\">\n            <path fill=\"#e24329\" d=\"M2 14l9.38 9v-9l-4-12.28c-.205-.632-1.176-.632-1.38 0z\"></path>\n            <path fill=\"#e24329\" d=\"M34 14l-9.38 9v-9l4-12.28c.205-.632 1.176-.632 1.38 0z\"></path>\n            <path fill=\"#e24329\" d=\"M18,34.38 3,14 33,14 Z\"></path>\n            <path fill=\"#fc6d26\" d=\"M18,34.38 11.38,14 2,14 6,25Z\"></path>\n            <path fill=\"#fc6d26\" d=\"M18,34.38 24.62,14 34,14 30,25Z\"></path>\n            <path fill=\"#fca326\" d=\"M2 14L.1 20.16c-.18.565 0 1.2.5 1.56l17.42 12.66z\"></path>\n            <path fill=\"#fca326\" d=\"M34 14l1.9 6.16c.18.565 0 1.2-.5 1.56L18 34.38z\"></path>\n          </svg>\n        : null}\n      </a>\n      <hr/>\n      <div className=\"Item-Author\">\n        <table>\n          <tbody>\n            <tr>\n              <td>\n                <img src={props.author_avatar} className=\"avatar\" alt=\"\"/>\n              </td>\n              <td>\n                <i>{props.author}</i>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <p className=\"Item-Description\">\n        {(props.description != null) ? ((props.description.length > 67) ? props.description.substring(0, 67) + \"...\" : props.description) : \"No Description here\"}\n      </p>\n\n      <div className=\"details\">\n        <i><b style={{\"fontSize\":\"15px\"}}>{props.language}</b>, <b>{props.stars}</b> stars, <b>{props.forks}</b> forks || <b>{props.issues}</b>issues</i>\n      </div>\n    </div>\n  );\n}\n\nexport default Item\n","import React, {Component} from 'react';\nimport './ItemList.css';\nimport Item from './Item';\n\n// import axios from 'axios';\n\nclass ItemList extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            links:{\n                \"github\": {\n                    \"link\": \"https://api.github.com/search/repositories?sort=stars&q=\",\n                    \"count\": \"total_count\",\n                    \"items\": \"items\",\n                    \"author\": \"owner|login\",\n                    \"author_avatar\": \"owner|avatar_url\",\n                    \"name\": \"name\",\n                    \"full_name\": \"full_name\",\n                    \"stars\": \"stargazers_count\",\n                    \"language\": \"language\",\n                    \"forks\": \"forks\",\n                    \"issues\": \"open_issues\",\n                    \"html_url\": \"html_url\",\n                    \"description\": \"description\"\n                },\n                \"gitlab\": {\n                    \"link\": \"https://gitlab.com/api/v4/projects?search=\",\n                    \"count\": \"\",\n                    \"items\": \"\",\n                    \"author\": \"namespace|name\",\n                    \"author_avatar\": \"namespace|avatar_url\",\n                    \"name\": \"name\",\n                    \"full_name\": \"name_with_namespace\",\n                    \"stars\": \"star_count\",\n                    \"language\": \"\",\n                    \"forks\": \"forks_count\",\n                    \"issues\": \"\",\n                    \"html_url\": \"web_url\",\n                    \"description\": \"description\"\n                },\n                \"bitbucket\": {\n                    \"link\": \"https://api.bitbucket.org/2.0/repositories\",\n                    \"count\": \"\",\n                    \"items\": \"\",\n                    \"author\": \"owner|display_name\",\n                    \"author_avatar\": \"owner|links|avatar|href\",\n                    \"name\": \"name\",\n                    \"full_name\": \"full_name\",\n                    \"stars\": \"\",\n                    \"language\": \"language\",\n                    \"forks\": \"\",\n                    \"issues\": \"\",\n                    \"html_url\": \"project|links|html|href\",\n                    \"description\": \"description\"\n                }\n            },\n            items: [],\n            load: false,\n            count: 0\n        }\n    }\n\n    fetch_projects = (search) => {\n        search = search.toLowerCase();\n\n        let source = \"github\";\n        fetch(this.state.links[source][\"link\"] + search)\n        .then(async response => {\n            let resData = await response.json();\n            \n            let items = [];\n \n            let source_object = this.state.links[source];\n            \n            resData[\"items\"].map((elt, index) => {\n                const author = source_object[\"author\"].split(\"|\");\n                const author_avatar = source_object[\"author_avatar\"].split(\"|\");\n \n                 items.push({\n                     \"index\": index,\n                     \"source\": source,\n                     \"title\": elt[source_object[\"name\"]],\n                     \"url\": elt[source_object[\"html_url\"]],\n                     \"author\": elt[author[0]][author[1]],\n                     \"author_avatar\": elt[author_avatar[0]][author_avatar[1]],\n                     \"stars\": parseInt(elt[source_object[\"stars\"]]),\n                     \"forks\": elt[source_object[\"forks\"]],\n                     \"issues\": elt[source_object[\"issues\"]],\n                     \"language\": elt[source_object[\"language\"]],\n                     \"description\": elt[source_object[\"description\"]]\n                 });\n                 return true;\n            });\n\n            source = \"gitlab\";\n            fetch(this.state.links[source][\"link\"] + search)\n            .then(async response => {\n                resData = await response.json();\n                source_object = this.state.links[source];\n                \n                resData.map((elt, index) => {\n                    const author = source_object[\"author\"].split(\"|\");\n                    const author_avatar = source_object[\"author_avatar\"].split(\"|\");\n                    let avatar=\"\"; \n                    if (typeof(elt[author_avatar[0]][author_avatar[1]]) != \"undefined\" && elt[author_avatar[0]][author_avatar[1]] != null){\n                        avatar = (elt[author_avatar[0]][author_avatar[1]].indexOf(\"http\") === -1) ? \"https://gitlab.com\" + elt[author_avatar[0]][author_avatar[1]] : elt[author_avatar[0]][author_avatar[1]];\n                    }\n                    items.push({\n                         \"index\": index,\n                         \"source\": source,\n                         \"title\": elt[source_object[\"name\"]],\n                         \"url\": elt[source_object[\"html_url\"]],\n                         \"author\": elt[author[0]][author[1]],\n                         \"author_avatar\": avatar,\n                         \"stars\": parseInt(elt[source_object[\"stars\"]]),\n                         \"forks\": elt[source_object[\"forks\"]],\n                         \"issues\": \"-\",\n                         \"language\": \"-\",\n                         \"description\": elt[source_object[\"description\"]]\n                     });\n                     return true;\n                });\n                // perform a sort\n                items.sort((a, b) => a.stars - b.stars).reverse();;\n                this.setState({\n                    load: false,\n                    items: items,\n                    count: items.length\n                });\n\n\n                // source = \"bitbucket\";\n                // fetch(this.state.links[source][\"link\"])\n                // .then(async response => {\n\n                //     resData = await response.json();\n                //     source_object = this.state.links[source];\n\n                //     const filter_results = resData[\"values\"].filter(elt => elt.indexOf(search) !== -1);\n\n                //     filter_results.map((elt, index) => {\n                //         const author = source_object[\"author\"].split(\"|\");\n                //         const url = source_object[\"html_url\"].split(\"|\");\n\n                //         const author_avatar = source_object[\"author_avatar\"].split(\"|\");\n\n                //         items.push({\n                //              \"index\": index,\n                //              \"source\": source,\n                //              \"title\": elt[source_object[\"name\"]],\n                //              \"url\": elt[url[0]][url[1]][url[2]][url[3]],\n                //              \"author\": elt[author[0]][author[1]],\n                //              \"author_avatar\": elt[author_avatar[0]][author_avatar[1]][author_avatar[2]][author_avatar[3]],\n                //              \"stars\": 0,\n                //              \"forks\": 0,\n                //              \"issues\": \"-\",\n                //              \"language\": \"-\",\n                //              \"description\": elt[source_object[\"description\"]]\n                //          });\n                //     });\n\n                //     // perform a sort\n                //     items.sort((a, b) => a.stars - b.stars).reverse();;\n                //     this.setState({\n                //         items: items,\n                //         count: items.length\n                //     });\n\n                // }).catch(error => {\n                //     this.setState({ errorMessage: error.toString() });\n                //     console.error('There was an error!', error);\n                // });\n\n\n            }).catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('There was an error!', error);\n            });\n\n        })\n        .catch(error => {\n            this.setState({ errorMessage: error.toString() });\n            console.error('There was an error!', error);\n        });\n    }\n\n    componentWillReceiveProps = (nextProps) => {\n        if (nextProps.go_search === true){\n            this.setState({\n                items: [],\n                load: true\n            });\n\n            console.log(\"Start-Fetching...\")\n\n            this.fetch_projects(nextProps.search);\n        }else{\n            //console.log(\"Text keyword(s)\");\n        }\n    }\n\n    componentDidMount(){\n        this.setState({ items: [] });\n\n        this.fetch_projects(\"reactjs\");\n    }\n\n    render() {\n        return (\n            <div>\n                <center>\n                    <div className=\"Item-List\">\n                        <div style={{\"width\":\"100%\", \"textAlign\": \"left\"}}>\n                            <span>Showing bests {this.state.count} results for {this.props.search.length === 0 ? \"reactJs\": this.props.search}.</span>\n                        </div>\n                        <br/>\n                        {this.state.load ? <img src=\"/loading.gif\" alt=\"\"/> :\n                            <div style={{\"display\": \"flex\", \"flexWrap\": \"wrap\"}}>\n                            {this.state.items.map((elt, index) => {\n                                return (<Item key={index}\n                                                source={elt.source}\n                                                url={elt.url}\n                                                title={elt.title}\n                                                author={elt.author}\n                                                author_avatar={elt.author_avatar}\n                                                language={elt.language}\n                                                stars={elt.stars}\n                                                issues={elt.issues}\n                                                forks={elt.forks}\n                                                description={elt.description}/>);\n                            })}\n                            </div>}\n                    </div>\n                </center>\n            </div>\n        );\n    }\n}\n\nexport default ItemList\n","import React, { Component } from 'react';\nimport './App.css';\nimport ItemList from './components/ItemList';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      search: \"\",\n      go_search: false\n    }\n  }\n\n  handle_change(event){\n\n    if (event.key === 'Enter') {\n      console.log('>> Enter have been pressed !!!');\n      this.setState({go_search: true});\n    }else{\n      this.setState({go_search: false});\n    }\n\n    this.setState({search: event.target.value});\n  }\n\n  go_search_change(){\n    console.log(\"Rechange-go_search\");\n\n    this.setState({\n      go_search: !this.state.go_search\n    });\n  }\n\n  search_query = (query) => {\n\n  }\n\n  componentDidMount(){\n\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"search-box\">\n            <p className=\"head\">\n              <code>Z0l0</code>\n              <small> Search open-source projects on github, gitlab and bitbucket at the same time in one place...</small>\n            </p>\n            \n            <input type=\"text\"\n                    className=\"search-zone\"\n                    onKeyDown = {(event) => this.handle_change(event)}\n                    placeholder=\"Search keyword(s) for open-source project(s)...\"\n                    />\n          </div>\n\n          <ItemList search={this.state.search} go_search={this.state.go_search}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}